{"version":3,"sources":["context/TodoContext.js","context/action.types.js","context/reducer.js","Components/TodoForm.js","Components/Todos.js","App.js","reportWebVitals.js","index.js"],"names":["TodoContext","createContext","ADD_TODO","REMOVE_TODO","state","action","type","payload","filter","todo","id","TodoForm","useState","todoString","setTodoString","dispatch","useContext","Form","onSubmit","e","preventDefault","alert","v4","FormGroup","InputGroup","Input","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","Todos","todos","ListGroup","className","map","ListGroupItem","onClick","App","useReducer","todoReducer","Provider","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEaA,G,YAAcC,2B,QCDdC,EAAW,WACXC,EAAc,cCAZ,WAACC,EAAOC,GACrB,OAAQA,EAAOC,MACb,KAAKJ,EACH,MAAM,GAAN,mBAAWE,GAAX,CAAkBC,EAAOE,UAC3B,KAAKJ,EACH,OAAOC,EAAMI,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOL,EAAOE,WACnD,QACE,OAAOH,I,wDCgDEO,EA3CE,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACdC,EADc,KACFC,EADE,KAEbC,EAAaC,qBAAWhB,GAAxBe,SAoBR,OACE,cAACE,EAAA,EAAD,CAAMC,SAnBa,SAACC,GAEpB,GADAA,EAAEC,iBACiB,KAAfP,EACF,OAAOQ,MAAM,uBAGf,IAAMZ,EAAO,CACXI,aACAH,GAAIY,eAGNP,EAAS,CACPT,KAAMJ,EACNK,QAASE,IAGXK,EAAc,KAGd,SACE,cAACS,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEnB,KAAK,OACLoB,KAAK,OACLhB,GAAG,OACHiB,YAAY,aACZC,MAAOf,EACPgB,SAAU,SAACV,GAAD,OAAOL,EAAcK,EAAEW,OAAOF,UAE1C,cAACG,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,CAAQC,MAAM,YAAd,2B,wBCjBGC,EAzBD,WAAO,IAAD,EACUnB,qBAAWhB,GAA/BoC,EADU,EACVA,MAAOrB,EADG,EACHA,SAEf,OACE,cAACsB,EAAA,EAAD,CAAWC,UAAU,kBAArB,SACGF,EAAMG,KAAI,SAAC9B,GAAD,OACT,eAAC+B,EAAA,EAAD,WACG/B,EAAKI,WACN,sBACEyB,UAAU,cACVG,QAAS,WACP1B,EAAS,CACPT,KAAMH,EACNI,QAASE,EAAKC,MALpB,SASE,cAAC,IAAD,CAAe4B,UAAU,cAXT7B,EAAKC,UCUlBgC,EAbH,WAAO,IAAD,EACUC,qBAAWC,EAAa,IADlC,mBACTR,EADS,KACFrB,EADE,KAEhB,OACE,cAACf,EAAY6C,SAAb,CAAsBjB,MAAO,CAAEQ,QAAOrB,YAAtC,SACE,eAAC+B,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,UCLOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3bc87f7.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const TodoContext = createContext();\r\n","// Action is a central place where all the functions that our app have was written\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\n","import { ADD_TODO, REMOVE_TODO } from \"./action.types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return [...state, action.payload]; // payload takes all the values that action is taking in this case its a string\r\n    case REMOVE_TODO:\r\n      return state.filter((todo) => todo.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  Input,\r\n  Button,\r\n  Form,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n} from \"reactstrap\";\r\n\r\nimport { v4 } from \"uuid\";\r\nimport { TodoContext } from \"../context/TodoContext\";\r\nimport { ADD_TODO } from \"../context/action.types\";\r\n\r\nconst TodoForm = () => {\r\n  const [todoString, setTodoString] = useState(\"\");\r\n  const { dispatch } = useContext(TodoContext);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (todoString === \"\") {\r\n      return alert(\"Please enter a todo\");\r\n    }\r\n\r\n    const todo = {\r\n      todoString,\r\n      id: v4(),\r\n    };\r\n\r\n    dispatch({\r\n      type: ADD_TODO,\r\n      payload: todo,\r\n    });\r\n\r\n    setTodoString(\"\");\r\n  };\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormGroup>\r\n        <InputGroup>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"todo\"\r\n            id=\"todo\"\r\n            placeholder=\"Enter ToDo\"\r\n            value={todoString}\r\n            onChange={(e) => setTodoString(e.target.value)}\r\n          />\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <Button color=\"secondary\">ADD</Button>\r\n          </InputGroupAddon>\r\n        </InputGroup>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useContext } from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { FaCheckDouble } from \"react-icons/fa\";\r\nimport { TodoContext } from \"../context/TodoContext\";\r\nimport { REMOVE_TODO } from \"../context/action.types\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst Todos = () => {\r\n  const { todos, dispatch } = useContext(TodoContext);\r\n\r\n  return (\r\n    <ListGroup className=\"mt-5 mb-2 items\">\r\n      {todos.map((todo) => (\r\n        <ListGroupItem key={todo.id}>\r\n          {todo.todoString}\r\n          <span\r\n            className=\"float-right\"\r\n            onClick={() => {\r\n              dispatch({\r\n                type: REMOVE_TODO,\r\n                payload: todo.id,\r\n              });\r\n            }}\r\n          >\r\n            <FaCheckDouble className=\"icons\" />\r\n          </span>\r\n        </ListGroupItem>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useReducer } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport { TodoContext } from \"./context/TodoContext\";\r\nimport todoReducer from \"./context/reducer\";\r\nimport TodoForm from \"./Components/TodoForm\";\r\nimport Todos from \"./Components/Todos\";\r\n\r\nconst App = () => {\r\n  const [todos, dispatch] = useReducer(todoReducer, []); // we are using dispatch as it takes multiple functions and stores all the values in array []\r\n  return (\r\n    <TodoContext.Provider value={{ todos, dispatch }}>\r\n      <Container fluid>\r\n        <h1>Todo App</h1>\r\n        <Todos />\r\n        <TodoForm />\r\n      </Container>\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}